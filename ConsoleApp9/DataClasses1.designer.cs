#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp9
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="school1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcourse(Course instance);
    partial void Updatecourse(Course instance);
    partial void Deletecourse(Course instance);
    partial void Insertscore(score instance);
    partial void Updatescore(score instance);
    partial void Deletescore(score instance);
    partial void Insertstudent(student instance);
    partial void Updatestudent(student instance);
    partial void Deletestudent(student instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ConsoleApp9.Properties.Settings.Default.school1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<score> scores
		{
			get
			{
				return this.GetTable<score>();
			}
		}
		
		public System.Data.Linq.Table<student> students
		{
			get
			{
				return this.GetTable<student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _NameCourse;
		
		private EntitySet<student> _students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameCourseChanging(string value);
    partial void OnNameCourseChanged();
    #endregion
		
		public Course()
		{
			this._students = new EntitySet<student>(new Action<student>(this.attach_students), new Action<student>(this.detach_students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCourse", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string NameCourse
		{
			get
			{
				return this._NameCourse;
			}
			set
			{
				if ((this._NameCourse != value))
				{
					this.OnNameCourseChanging(value);
					this.SendPropertyChanging();
					this._NameCourse = value;
					this.SendPropertyChanged("NameCourse");
					this.OnNameCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_student", Storage="_students", ThisKey="id", OtherKey="courseid")]
		public EntitySet<student> students
		{
			get
			{
				return this._students;
			}
			set
			{
				this._students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_students(student entity)
		{
			this.SendPropertyChanging();
			entity.course = this;
		}
		
		private void detach_students(student entity)
		{
			this.SendPropertyChanging();
			entity.course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.score")]
	public partial class score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _score1;
		
		private EntitySet<student> _students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onscore1Changing(int value);
    partial void Onscore1Changed();
    #endregion
		
		public score()
		{
			this._students = new EntitySet<student>(new Action<student>(this.attach_students), new Action<student>(this.detach_students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="score", Storage="_score1", DbType="Int NOT NULL")]
		public int score1
		{
			get
			{
				return this._score1;
			}
			set
			{
				if ((this._score1 != value))
				{
					this.Onscore1Changing(value);
					this.SendPropertyChanging();
					this._score1 = value;
					this.SendPropertyChanged("score1");
					this.Onscore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="score_student", Storage="_students", ThisKey="id", OtherKey="scoreid")]
		public EntitySet<student> students
		{
			get
			{
				return this._students;
			}
			set
			{
				this._students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_students(student entity)
		{
			this.SendPropertyChanging();
			entity.score = this;
		}
		
		private void detach_students(student entity)
		{
			this.SendPropertyChanging();
			entity.score = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
	public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Fullname;
		
		private string _Gender;
		
		private int _courseid;
		
		private int _scoreid;
		
		private EntityRef<Course> _course;
		
		private EntityRef<score> _score;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OncourseidChanging(int value);
    partial void OncourseidChanged();
    partial void OnscoreidChanging(int value);
    partial void OnscoreidChanged();
    #endregion
		
		public student()
		{
			this._course = default(EntityRef<Course>);
			this._score = default(EntityRef<score>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseid", DbType="Int NOT NULL")]
		public int courseid
		{
			get
			{
				return this._courseid;
			}
			set
			{
				if ((this._courseid != value))
				{
					if (this._course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseidChanging(value);
					this.SendPropertyChanging();
					this._courseid = value;
					this.SendPropertyChanged("courseid");
					this.OncourseidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_scoreid", DbType="Int NOT NULL")]
		public int scoreid
		{
			get
			{
				return this._scoreid;
			}
			set
			{
				if ((this._scoreid != value))
				{
					if (this._score.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnscoreidChanging(value);
					this.SendPropertyChanging();
					this._scoreid = value;
					this.SendPropertyChanged("scoreid");
					this.OnscoreidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="course_student", Storage="_course", ThisKey="courseid", OtherKey="id", IsForeignKey=true)]
		public Course course
		{
			get
			{
				return this._course.Entity;
			}
			set
			{
				Course previousValue = this._course.Entity;
				if (((previousValue != value) 
							|| (this._course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._course.Entity = null;
						previousValue.students.Remove(this);
					}
					this._course.Entity = value;
					if ((value != null))
					{
						value.students.Add(this);
						this._courseid = value.id;
					}
					else
					{
						this._courseid = default(int);
					}
					this.SendPropertyChanged("course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="score_student", Storage="_score", ThisKey="scoreid", OtherKey="id", IsForeignKey=true)]
		public score score
		{
			get
			{
				return this._score.Entity;
			}
			set
			{
				score previousValue = this._score.Entity;
				if (((previousValue != value) 
							|| (this._score.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._score.Entity = null;
						previousValue.students.Remove(this);
					}
					this._score.Entity = value;
					if ((value != null))
					{
						value.students.Add(this);
						this._scoreid = value.id;
					}
					else
					{
						this._scoreid = default(int);
					}
					this.SendPropertyChanged("score");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
